{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/leon/Development/code/phase2/code_challenge2/phase-2-hooks-code-challenge-bank-of-flatiron-Mugo-leon/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   return (\n//     <div>\n//       <Search />\n//       <AddTransactionForm />\n//       <TransactionsList />\n//     </div>\n//   );\n// }\n// export default AccountContainer;\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\"; // ... (imports and other code)\n\nfunction AccountContainer() {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  useEffect(() => {\n    // Fetch data from backend API\n    fetch(\"http://localhost:8001\").then(response => response.json()).then(data => {\n      setTransactions(data.transactions);\n      setFilteredTransactions(data.transactions);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  const addTransaction = newTransaction => {\n    setTransactions([...transactions, newTransaction]); // Send a POST request to the backend API\n\n    fetch(\"http://localhost:8001\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        transactions: [...transactions, newTransaction]\n      })\n    }).then(response => response.json()).then(data => console.log(\"Transaction added successfully:\", data)).catch(error => console.error(\"Error adding transaction:\", error));\n  };\n\n  const handleSearch = term => {\n    const filtered = transactions.filter(transaction => transaction.description.toLowerCase().includes(term.toLowerCase()));\n    setFilteredTransactions(filtered);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      onAddTransaction: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: filteredTransactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"7na4B7SK+6CvvEHetQqCQKoiewE=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/leon/Development/code/phase2/code_challenge2/phase-2-hooks-code-challenge-bank-of-flatiron-Mugo-leon/src/components/AccountContainer.js"],"names":["React","useEffect","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transactions","setTransactions","filteredTransactions","setFilteredTransactions","fetch","then","response","json","data","catch","error","console","addTransaction","newTransaction","method","headers","body","JSON","stringify","log","handleSearch","term","filtered","filter","transaction","description","toLowerCase","includes"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B,C,CAEA;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,oBAAD,EAAuBC,uBAAvB,IAAkDR,QAAQ,CAAC,EAAD,CAAhE;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAU,IAAAA,KAAK,CAAC,uBAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdP,MAAAA,eAAe,CAACO,IAAI,CAACR,YAAN,CAAf;AACAG,MAAAA,uBAAuB,CAACK,IAAI,CAACR,YAAN,CAAvB;AACD,KALH,EAMGS,KANH,CAMUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC,CANpB;AAOD,GATQ,EASN,EATM,CAAT;;AAWA,QAAME,cAAc,GAAIC,cAAD,IAAoB;AACzCZ,IAAAA,eAAe,CAAC,CAAC,GAAGD,YAAJ,EAAkBa,cAAlB,CAAD,CAAf,CADyC,CAGzC;;AACAT,IAAAA,KAAK,CAAC,uBAAD,EAA0B;AAC7BU,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoB;AAK7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAElB,QAAAA,YAAY,EAAE,CAAC,GAAGA,YAAJ,EAAkBa,cAAlB;AAAhB,OAAf;AALuB,KAA1B,CAAL,CAOGR,IAPH,CAOSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPtB,EAQGF,IARH,CAQSG,IAAD,IAAUG,OAAO,CAACQ,GAAR,CAAY,iCAAZ,EAA+CX,IAA/C,CARlB,EASGC,KATH,CASUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C,CATpB;AAUD,GAdD;;AAgBA,QAAMU,YAAY,GAAIC,IAAD,IAAU;AAC7B,UAAMC,QAAQ,GAAGtB,YAAY,CAACuB,MAAb,CAAqBC,WAAD,IACnCA,WAAW,CAACC,WAAZ,CAAwBC,WAAxB,GAAsCC,QAAtC,CAA+CN,IAAI,CAACK,WAAL,EAA/C,CADe,CAAjB;AAGAvB,IAAAA,uBAAuB,CAACmB,QAAD,CAAvB;AACD,GALD;;AAOA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEF;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAoB,MAAA,gBAAgB,EAAER;AAAtC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEV;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA7CQH,gB;;KAAAA,gB;AA+CT,eAAeA,gBAAf","sourcesContent":["// import React from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n//   return (\n//     <div>\n//       <Search />\n//       <AddTransactionForm />\n//       <TransactionsList />\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\n// ... (imports and other code)\n\nfunction AccountContainer() {\n  const [transactions, setTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n  useEffect(() => {\n    // Fetch data from backend API\n    fetch(\"http://localhost:8001\")\n      .then((response) => response.json())\n      .then((data) => {\n        setTransactions(data.transactions);\n        setFilteredTransactions(data.transactions);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  const addTransaction = (newTransaction) => {\n    setTransactions([...transactions, newTransaction]);\n\n    // Send a POST request to the backend API\n    fetch(\"http://localhost:8001\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ transactions: [...transactions, newTransaction] }),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(\"Transaction added successfully:\", data))\n      .catch((error) => console.error(\"Error adding transaction:\", error));\n  };\n\n  const handleSearch = (term) => {\n    const filtered = transactions.filter((transaction) =>\n      transaction.description.toLowerCase().includes(term.toLowerCase())\n    );\n    setFilteredTransactions(filtered);\n  };\n\n  return (\n    <div>\n      <Search onSearch={handleSearch} />\n      <AddTransactionForm onAddTransaction={addTransaction} />\n      <TransactionsList transactions={filteredTransactions} />\n    </div>\n  );\n}\n\nexport default AccountContainer;\n\n"]},"metadata":{},"sourceType":"module"}